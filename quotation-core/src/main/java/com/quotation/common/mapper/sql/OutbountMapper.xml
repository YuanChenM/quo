<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.quotation.common.service.SsmsCommonService">

    <sql id="ConstDef">
        <bind name="IP_STATUS_EXP_OUTBOUND" value="@com.quotation.common.consts.CodeConst$IpStatus@EXP_OUTBOUND" />
        <bind name="IP_STATUS_INVOICE" value="@com.quotation.common.consts.CodeConst$IpStatus@INVOICE" />
        <bind name="IP_STATUS_CANCELLED" value="@com.quotation.common.consts.CodeConst$IpStatus@CANCELLED" />
        <bind name="ONHOLD_FLAG_NORMAL" value="@com.quotation.common.consts.CodeConst$OnHoldFlag@NORMAL" />
    </sql>
    
     <update id="modOutboundIfValidFlag" parameterType="com.quotation.common.entity.IFOutboundEntity">
        UPDATE 
            TNT_IF_EXP_OUTBOUND C
        SET 
            VALID_FLAG = 1
        WHERE
        <if test="expPartsIdList == null or expPartsIdList.size() == 0">
            IF_DATE_TIME = #{ifDateTime,jdbcType=TIMESTAMP}
        AND 
        </if>
            HANDLE_FLAG <![CDATA[<>]]> 1
        AND
            IMP_PO_NO IN
              (
            SELECT
                IMP_PO_NO
            FROM
                TNT_ORDER O
            INNER JOIN TNM_EXP_PARTS P
            ON P.TTC_PARTS_NO = C.TTC_PARTS_NO
            AND P.PARTS_STATUS = 2
            INNER JOIN TNT_ORDER_DETAIL OD
            ON OD.ORDER_ID = O.ORDER_ID
            AND OD.EXP_PARTS_ID = P.EXP_PARTS_ID
        <!-- 
            (CANCEL_FLAG = '' OR CANCEL_FLAG IS NULL) 
        AND 
        EXISTS 
            (
        SELECT 
            * 
        FROM 
            TNT_ORDER O 
        INNER JOIN TNT_ORDER_DETAIL OD
        ON OD.ORDER_ID = O.ORDER_ID
        WHERE 
            O.IMP_PO_NO = C.IMP_PO_NO
        -->
        <if test="expPartsIdList != null and expPartsIdList.size() > 0">
            AND
                OD.EXP_PARTS_ID
                IN
                <foreach item="param" index="index" collection="expPartsIdList" open="(" separator="," close=")">  
                #{param}  
                </foreach>
        </if>
        )
        
    </update>
    
     <update id="modOutboundIfValidFlagForCancel" parameterType="com.quotation.common.entity.IFOutboundEntity">
        UPDATE 
            TNT_IF_EXP_OUTBOUND C
        SET 
            VALID_FLAG = 1
        WHERE
        <if test="expPartsIdList == null or expPartsIdList.size() == 0">
            IF_DATE_TIME = #{ifDateTime,jdbcType=TIMESTAMP}
        AND 
        </if>
            HANDLE_FLAG <![CDATA[<>]]> 1
        AND
            CANCEL_FLAG = 'D' 
        AND MODULE_NO IN ( 
            SELECT
              MODULE_NO 
            FROM
              TNT_IP IP 
            INNER JOIN
               TNT_DT_IP DIP
            ON
               DIP.IP_NO = IP.IP_NO
            INNER JOIN
               TNT_EXP_DT D
            ON
               D.DT_NO = DIP.DT_NO
            INNER JOIN
               TNT_ORDER_DETAIL T
            ON
               T.EXP_PO_NO = D.EXP_PO_NO
            AND
               T.EXP_PO_ITEM_NO = D.EXP_PO_ITEM_NO
            AND
               T.STATUS = 1 
            INNER JOIN
               TNM_EXP_PARTS P
            ON
               P.EXP_PARTS_ID = T.EXP_PARTS_ID
            WHERE
               IP.MODULE_NO = C.MODULE_NO
            AND
               P.SSMS_MAIN_ROUTE = C.MAIN_ROUTE
            <if test="expPartsIdList != null and expPartsIdList.size() > 0">
            AND
               T.EXP_PARTS_ID
            IN
                <foreach item="param" index="index" collection="expPartsIdList" open="(" separator="," close=")">  
                #{param}  
                </foreach>
            </if>
            )
        
    </update>
    
    <select id="getOutboundIfList" parameterType="com.quotation.common.entity.IFOutboundEntity" resultType="com.quotation.common.entity.IFOutboundEntity">
        SELECT
             dataId
            , expCode
            , representativeRoot
            , impPoNo
            , expInboundPlanDate
            , expOutboundActualDate
            , partsNo
            , outboundQty
            , dtNo
            , ipNo
            , containerNo
            , moduleNo
            , transportationMode
            , cancelFlag
            , if_date_time
            , valid_flag
            , handle_flag
            , createdBy
            , createdDate
            , updatedBy
            , updatedDate
            , version
            , partsId
            , expPartsId
            , expPoNo
            , expPoItemNo
            , customerOrderNo
            , customerId
            , supplierId
            , businessPattern
            , officeId
            , ifOutBoundId
            , status
        FROM (
            SELECT
                 C.DATA_ID AS dataId
               , C.EXP_CODE AS expCode
               , C.MAIN_ROUTE AS representativeRoot
               , C.IMP_PO_NO AS impPoNo
               , T.EXP_INB_PLAN_DATE AS expInboundPlanDate
               , C.EXP_OB_ACTUAL_DATE AS expOutboundActualDate
               , C.TTC_PARTS_NO AS partsNo
               , C.OUTBOUND_QTY AS outboundQty
               , C.DT_NO AS dtNo
               , C.IP_NO AS ipNo
               , C.CONTAINER_NO AS containerNo
               , C.MODULE_NO AS moduleNo
               , C.TRANSPORT_MODE AS transportationMode
               , C.CANCEL_FLAG AS cancelFlag
               , C.IF_DATE_TIME AS if_date_time
               , C.VALID_FLAG AS valid_flag
               , C.HANDLE_FLAG AS handle_flag
               , C.CREATED_BY AS createdBy
               , C.CREATED_DATE AS createdDate
               , C.UPDATED_BY AS updatedBy
               , C.UPDATED_DATE AS updatedDate
               , C.VERSION AS version
               , T.PARTS_ID AS partsId
               , T.EXP_PARTS_ID AS expPartsId
               , T.EXP_PO_NO AS expPoNo
               , T.EXP_PO_ITEM_NO AS expPoItemNo
               , O.CUSTOMER_ORDER_NO AS customerOrderNo
               , O.CUSTOMER_ID AS customerId
               , P.SUPPLIER_ID AS supplierId
               , P.BUSINESS_PATTERN AS businessPattern
               , O.OFFICE_ID AS officeId
               , C.IF_OUTBOUND_ID AS ifOutBoundId
               , D.STATUS AS status
            FROM
               TNT_IF_EXP_OUTBOUND C
            INNER JOIN
               TNT_EXP_DT D
            ON
               D.DT_NO = C.DT_NO
            INNER JOIN
               TNT_ORDER_DETAIL T
            ON
               T.EXP_PO_NO = D.EXP_PO_NO
            AND
               T.EXP_PO_ITEM_NO = D.EXP_PO_ITEM_NO
            AND
               T.STATUS = 1
            INNER JOIN
               TNT_ORDER O
            ON
               O.ORDER_ID = T.ORDER_ID
            INNER JOIN
               TNM_EXP_PARTS P
            ON
               P.EXP_PARTS_ID = T.EXP_PARTS_ID
            AND
               P.PARTS_STATUS = 2
            WHERE
               C.VALID_FLAG = 1
            AND
               C.HANDLE_FLAG
            IN
            <foreach item="param" index="index" collection="handleFlagParam" open="(" separator="," close=")">  
                    #{param}  
            </foreach>
            <if test="expPartsIdList == null or expPartsIdList.size() == 0">
            AND
               C.IF_DATE_TIME = #{ifDateTime,jdbcType=TIMESTAMP}
            </if>
            <if test="expPartsIdList != null and expPartsIdList.size() > 0">
            AND 
                P.EXP_PARTS_ID 
                IN
                <foreach item="param" index="index" collection="expPartsIdList" open="(" separator="," close=")">  
                #{param}  
                </foreach>
            </if>
            
            UNION ALL
            
            SELECT DISTINCT
                 C.DATA_ID AS dataId
               , C.EXP_CODE AS expCode
               , C.MAIN_ROUTE AS representativeRoot
               , O.IMP_PO_NO AS impPoNo
               , NULL AS expInboundPlanDate
               , C.EXP_OB_ACTUAL_DATE AS expOutboundActualDate
               , C.TTC_PARTS_NO AS partsNo
               , C.OUTBOUND_QTY AS outboundQty
               , C.DT_NO AS dtNo
               , C.IP_NO AS ipNo
               , C.CONTAINER_NO AS containerNo
               , C.MODULE_NO AS moduleNo
               , C.TRANSPORT_MODE AS transportationMode
               , C.CANCEL_FLAG AS cancelFlag
               , C.IF_DATE_TIME AS if_date_time
               , C.VALID_FLAG AS valid_flag
               , C.HANDLE_FLAG AS handle_flag
               , C.CREATED_BY AS createdBy
               , C.CREATED_DATE AS createdDate
               , C.UPDATED_BY AS updatedBy
               , C.UPDATED_DATE AS updatedDate
               , C.VERSION AS version
               , T.PARTS_ID AS partsId
               , T.EXP_PARTS_ID AS expPartsId
               , T.EXP_PO_NO AS expPoNo
               , NULL AS expPoItemNo
               , O.CUSTOMER_ORDER_NO AS customerOrderNo
               , O.CUSTOMER_ID AS customerId
               , P.SUPPLIER_ID AS supplierId
               , P.BUSINESS_PATTERN AS businessPattern
               , O.OFFICE_ID AS officeId
               , C.IF_OUTBOUND_ID AS ifOutBoundId
               , D.STATUS AS status
            FROM
               TNT_IF_EXP_OUTBOUND C
            INNER JOIN
               TNT_IP IP
            ON
               IP.MODULE_NO = C.MODULE_NO
            INNER JOIN
               TNT_DT_IP DIP
            ON
               DIP.IP_NO = IP.IP_NO
            INNER JOIN
               TNT_EXP_DT D
            ON
               D.DT_NO = DIP.DT_NO
            INNER JOIN
               TNT_ORDER_DETAIL T
            ON
               T.EXP_PO_NO = D.EXP_PO_NO
            AND
               T.EXP_PO_ITEM_NO = D.EXP_PO_ITEM_NO
            AND
               T.STATUS = 1
            INNER JOIN
               TNT_ORDER O
            ON
               O.ORDER_ID = T.ORDER_ID
            INNER JOIN
               TNM_EXP_PARTS P
            ON
               P.EXP_PARTS_ID = T.EXP_PARTS_ID
            AND
               P.SSMS_MAIN_ROUTE = C.MAIN_ROUTE
            AND
               P.PARTS_STATUS = 2
            WHERE
               C.CANCEL_FLAG = 'D'
            AND
               C.VALID_FLAG = 1
            AND
               C.HANDLE_FLAG
            IN
            <foreach item="param" index="index" collection="handleFlagParam" open="(" separator="," close=")">  
                    #{param}  
            </foreach>
            <if test="expPartsIdList == null or expPartsIdList.size() == 0">
            AND
               C.IF_DATE_TIME = #{ifDateTime,jdbcType=TIMESTAMP}
            </if>
            <if test="expPartsIdList != null and expPartsIdList.size() > 0">
            AND 
                P.EXP_PARTS_ID 
                IN
                <foreach item="param" index="index" collection="expPartsIdList" open="(" separator="," close=")">  
                #{param}  
                </foreach>
            </if>
        )
        ORDER BY
          ifOutBoundId
        
    </select>
    
    <select id="checkOutboundSSMSExist" parameterType="com.quotation.common.entity.IFOutboundEntity" resultType="com.quotation.common.entity.IFOutboundEntity">
        SELECT 
                PARTS_ID AS partsId
              , QTY AS qty
              , IMP_PO_NO AS impPoNo
              , EXP_PO_NO AS expPoNo
              , EXP_PO_ITEM_NO AS expPoItemNo
              , STATUS AS status
              , IP_NO AS ipNo
        FROM
             TNT_IP 
        WHERE
             IP_NO = #{ipNo,jdbcType=VARCHAR}
    </select>
    
    <select id="checkOutboundIPExist" parameterType="com.quotation.common.entity.IFOutboundEntity" resultType="com.quotation.common.entity.IFOutboundEntity">
        SELECT 
                PARTS_ID AS partsId
              , QTY AS qty
              , IMP_PO_NO AS impPoNo
              , EXP_PO_NO AS expPoNo
              , EXP_PO_ITEM_NO AS expPoItemNo
              , STATUS AS status
              , IP_NO AS ipNo
        FROM
            TNT_IP 
        WHERE
            MODULE_NO = #{moduleNo,jdbcType=VARCHAR}
    </select>
    
    <select id="outboundSumQty" parameterType="com.quotation.common.entity.IFOutboundEntity" resultType="com.quotation.common.entity.IFOutboundEntity">
    
        <include refid="ConstDef"/>
        SELECT 
            SUM(I.QTY) AS totalQty
        FROM
            TNT_IP AS I
        INNER JOIN
            TNT_DT_IP AS D
        ON
            I.IP_NO = D.IP_NO
        INNER JOIN
            TNT_EXP_DT E
        ON
            E.DT_NO = D.DT_NO 
        INNER JOIN
            TNT_ORDER_DETAIL T
        ON
            T.EXP_PO_NO = E.EXP_PO_NO
        AND
            T.EXP_PO_ITEM_NO = E.EXP_PO_ITEM_NO
        AND
            T.STATUS = 1
        INNER JOIN
            TNM_EXP_PARTS P
        ON
            P.EXP_PARTS_ID = T.EXP_PARTS_ID
        WHERE
            P.PARTS_STATUS = 2
        AND
            P.SSMS_MAIN_ROUTE = #{representativeRoot,jdbcType=VARCHAR}
        AND       
            I.STATUS = #{IP_STATUS_EXP_OUTBOUND}
        AND
            I.MODULE_NO = #{moduleNo,jdbcType=VARCHAR}
        GROUP BY
              I.IMP_PO_NO
            , I.EXP_PO_NO
            , I.CUSTOMER_ORDER_NO
            , I.PARTS_ID
            , I.SUPPLIER_ID
    </select>
    
    <update id="modOutboundSSMS" parameterType="com.quotation.common.entity.IFOutboundEntity">
        <include refid="ConstDef"/>
        UPDATE 
            TNT_IP
        SET 
              OFFICE_ID = #{officeId,jdbcType=INTEGER}
            , IP_NO = #{ipNo,jdbcType=VARCHAR}
            , CUSTOMER_ID = #{customerId,jdbcType=INTEGER}
            , BUSINESS_PATTERN = #{businessPattern,jdbcType=INTEGER}
            , PARTS_ID = #{partsId,jdbcType=INTEGER}
            , EXP_PARTS_ID = #{expPartsId,jdbcType=INTEGER}
            , SUPPLIER_ID = #{supplierId,jdbcType=INTEGER}
            , IMP_PO_NO = #{impPoNo,jdbcType=VARCHAR}
            , CUSTOMER_ORDER_NO = #{customerOrderNo,jdbcType=VARCHAR}
            , EXP_PO_NO = #{expPoNo,jdbcType=VARCHAR}
            , EXP_PO_ITEM_NO = #{expPoItemNo,jdbcType=VARCHAR}
            , CONTAINER_NO = #{containerNo,jdbcType=VARCHAR}
            , MODULE_NO = #{moduleNo,jdbcType=VARCHAR}
            , QTY = #{outboundQty,jdbcType=DECIMAL}
            , STATUS = #{IP_STATUS_EXP_OUTBOUND}
            , EXP_INB_PLAN_DATE = #{expInPlanDate,jdbcType=DATE}
            , EXP_OB_ACTUAL_DATE = #{expOutActDate,jdbcType=DATE}
            , UPDATED_BY = #{updatedBy,jdbcType=INTEGER}
            , VERSION = VERSION + 1
            , UPDATED_DATE = #{updatedDate,jdbcType=TIMESTAMP}
        WHERE
            IP_NO = #{ipNo,jdbcType=VARCHAR}
    </update>
    
    <update id="modOutboundCancel" parameterType="com.quotation.common.entity.IFOutboundEntity">
        <include refid="ConstDef"/>
        UPDATE 
            TNT_IP
        SET 
              STATUS = #{IP_STATUS_CANCELLED}
            , UPDATED_BY = #{updatedBy,jdbcType=INTEGER}
            , VERSION = VERSION + 1
            , UPDATED_DATE = #{updatedDate,jdbcType=TIMESTAMP}
        WHERE
            MODULE_NO = #{moduleNo,jdbcType=VARCHAR}
        AND
            EXP_PARTS_ID = #{expPartsId,jdbcType=INTEGER}
        AND
            STATUS = #{IP_STATUS_EXP_OUTBOUND}
    </update>
    
    <insert id="addOutboundSSMS" parameterType="com.quotation.common.entity.IFOutboundEntity">
        <include refid="ConstDef"/>
        INSERT 
        INTO 
            TNT_IP 
            (
              IP_ID
            , OFFICE_ID
            , IP_NO 
            , CUSTOMER_ID 
            , BUSINESS_PATTERN
            , PARTS_ID 
            , EXP_PARTS_ID 
            , SUPPLIER_ID 
            , IMP_PO_NO 
            , CUSTOMER_ORDER_NO 
            , EXP_PO_NO 
            , EXP_PO_ITEM_NO 
            , CONTAINER_NO 
            , MODULE_NO 
            , QTY 
            , EXP_INB_PLAN_DATE 
            , EXP_OB_ACTUAL_DATE
            , ONHOLD_FLAG
            , STATUS
            , CREATED_BY
            , CREATED_DATE 
            , UPDATED_BY 
            , UPDATED_DATE
            , VERSION 
        )
        VALUES
        (
            SEQ_TNT_IP.NEXTVAL,
            #{officeId,jdbcType=INTEGER},
            #{ipNo,jdbcType=VARCHAR},
            #{customerId,jdbcType=INTEGER},
            #{businessPattern,jdbcType=INTEGER},
            #{partsId,jdbcType=INTEGER},
            #{expPartsId,jdbcType=INTEGER},
            #{supplierId,jdbcType=INTEGER},
            #{impPoNo,jdbcType=VARCHAR},
            #{customerOrderNo,jdbcType=VARCHAR},
            #{expPoNo,jdbcType=VARCHAR},
            #{expPoItemNo,jdbcType=VARCHAR},
            #{containerNo,jdbcType=VARCHAR},
            #{moduleNo,jdbcType=VARCHAR},
            #{outboundQty,jdbcType=DECIMAL},
            #{expInPlanDate,jdbcType=DATE},
            #{expOutActDate,jdbcType=DATE},
            #{ONHOLD_FLAG_NORMAL},
            #{IP_STATUS_EXP_OUTBOUND}, 
            #{createdBy,jdbcType=INTEGER},
            #{createdDate,jdbcType=TIMESTAMP},
            #{updatedBy,jdbcType=INTEGER},
            #{updatedDate,jdbcType=TIMESTAMP},
            1
        )
    </insert>
    
    <insert id="addOutboundDT" parameterType="com.quotation.common.entity.IFOutboundEntity">
        INSERT 
        INTO 
            TNT_DT_IP 
            (
              DT_IP_ID
            , DT_NO 
            , IP_NO
            , CREATED_BY
            , CREATED_DATE 
            , UPDATED_BY 
            , UPDATED_DATE
            , VERSION 
        )
        VALUES
        (
            SEQ_TNT_DT_IP.NEXTVAL,
            #{dtNo,jdbcType=VARCHAR},
            #{ipNo,jdbcType=VARCHAR},
            #{createdBy,jdbcType=INTEGER},
            #{createdDate,jdbcType=TIMESTAMP},
            #{updatedBy,jdbcType=INTEGER},
            #{updatedDate,jdbcType=TIMESTAMP},
            1
        )
    </insert>
    
    <update id="modOutboundIfHandleFlag" parameterType="com.quotation.common.entity.IFOutboundEntity">
        UPDATE 
            TNT_IF_EXP_OUTBOUND
        SET 
              HANDLE_FLAG = #{handleFlag,jdbcType=INTEGER}
            , UPDATED_DATE = #{updatedDate,jdbcType=TIMESTAMP}
            , UPDATED_BY = #{updatedBy,jdbcType=INTEGER}
            , VERSION = VERSION + 1
        WHERE
            IF_OUTBOUND_ID = #{ifOutboundId,jdbcType=INTEGER}
    </update>
    
</mapper>